#!/usr/bin/env python3

mySet = set('ATGTGGG')
mySet2 = {'ATGCCT'}
print(mySet)
print(mySet2)

#Q2
#Difference
setA = set('3 14 15 9 26 5 35 9')
setB = set('60 22 14 0 9')
print(setA - setB)

#Union
print(setA | setB)

#Intersection
print(setA & setB)

#symmetric Difference
print(setA ^ setB)

#Q3
dna = set('GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACTTTTCGTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGAC')
print(dna)

#Q4
dna2 = 'GAACTCCAAAAATGAAAACATAGTAGCAATCAAAGCATCCCACTATTTTTTGTCTCTCGTTTCATTAGCGTTGTAAATTACTGATACCCTACTATACCTCTACAAGGCCTTTGTCATCTTTTTACTCAAGTGTGAAATCATCACTTATTGTATGAAGGATGAGCTTTCCGTTCGCTAGTTTGCTGAAAAGGCCTTCTGCAATAAGCTCTCTATTATCTTTAAAAAAACCTGGTTCCTGGTCTTCCATTCTGCTAAAAGCTGTAGGGGTTTTATCACGAGATTCCCGTTGGCATTCTGACTTATTAAAAATGCTTACAGAAGAAATGGATTCTTTAAATGGTCAAATTAATACGTGGACAGATAATAATCCTTTATTAGATGAAATTACGAAGCCATACAGAAAATCTTCAACTCGTTTTTTTCATCCGCTTCTTGTACTTCTAATGTCTAGAGCATCAGTAAATGGGGATCCACCGAGTCAGCAACTATTTCAAAGGTACAAACAACTTGCCCGTGTAACAGAATTGATTCATGCTGCCAATATAATTCATATTAATATTGGAGAAGAACAAAGCAACGAACAGATTAAACTTGCAACGTTGGTTGGAGATTATTTACTCGGAAAGGCGTCTGTTGATTTAGCACATTTAGAAAACAACGCTATTACAGAAATTATGGCTTCTGTTATTGCAAACTTAGTTGAAGGGCACTTCGGAAGCCGACAAAATGGCTCTGTTGGTTTGTCAAACGAACGAACCATCCTTCTGCAATCAGCCTTTATGCCAGCAAAGGCATGTTTATGCGCAAGCATATTGAATAACTCATCACAATACATTAATGATGCGTGTTTCAATTATGGAAAATTTCTAGGCTTATCGCTGCAACTGGCCCATAAGCCTGTATCTCCTGACGCCCAAGTTTTGCAAAAGAATAATGACATTTTGAAAACATATGTTGAGAATGCCAAGAGCTCATTGTCTGTTTTCCCCGATATAGAGGCTAAGCAAGCTCTCATGGAAATCGCTAATAGTGTTTCGAAGTAATCGACAGGTATTGTATCCTGGATTAATATTAGGGTGGCTCATGCATGCTCGTGCAATCGTAACAAATATGTCTTTCTTTTACGAATTTTAACGCTTCAATATAAATCATATTTTTCCTCA'
uniq1 = set(dna2)
uniq2 = {} 
for nt in uniq1:
  print(nt)
  uniq2[nt] = dna2.count(nt)
print(uniq2)

#HOW TO COUNT THE GC CONTENT

#Q5
seq_file_obj = open('Python_06.txt')
contents = seq_file_obj
for words in seq_file_obj:
  print(words.upper())

#Q6
#We want to open the txt file from read mode and write mode to make edits in the write file only
#line 47 says: I am opening the file and saving it as an object that i named python06. so now the contents of the file exist in python06 so from now on, the file we're working with the .uc file. python06 is whats reading and whats writing.
# FIX LATER!!!! with open('Python_06.txt','r') as python06 , open('Python_06_uc.txt','w') as python06Write:
#line is  each line of the file. the file is now is * python0n *
#FIX LATER!!!!  for line in python06:
#rstrip took away all the space between lines.
#    line = line.rstrip()
#FIX LATER!!!!!    line = line.upper()
#FIX LATER!!!!    python06Write.write(line)
#In this line, convert the reading file into a writing text file to be able to make edits
#Also want to turn every line into uppercase
#   print(line.upper())  

#Q7

#FOR THIS PROBLEM, I HAD TO OPEN THE FILE (NEXT TIME USE OPEN WITH TO ENSURE MY FILE CLOSES). I THEN HAD TO CREATE AND EMPTY LIST( I COULD ALSO ACCOMPLISH THIS PROBLEM BY CREATING A DICTIONARY). I HAD TO CREATE AN EMPTY LIST TO PLACE MY ITENMS IN THE FILE INTO. I THEN USED THE RSTRIP COMMAND TO SPLIT THE GENE FROM THE SEQUENCE OF IT AND ASSIGN EACH ONE TO A FIELD; EITHER 0 OR 1 IS THE EASIEST PLACE TO START. THEN I NEEDED TO WRITE THE REVERSE COMPLIMENT SO I NEEDED TO SPECICITY WHAT TO REPLACE WHAT WITH WHAT. THEN THE COMMAND FOR WRITING SOMETHING IN REVERSE IS ::-1 AND I USE THE [] BECAUSE ITS A LIST. 
genefile = open('Python_06.seq.txt')
#fields adds an empty list
for line in genefile:
#fields adds an empty list
  line = line.rstrip()
  fields = [] 
  fields = line.split('\t') 
  gene_name = fields[0]
  seq = fields[1]
  comp = seq.replace('A', 't').replace('T', 'a').replace('G', 'c').replace('C', 'g') 
  rev = comp[::-1] 
  print(gene_name)
  print(seq)
  print(rev)
  print('>' + gene_name + '\n' + rev)

#Q8
#*****FIRST THING IS TO PULL THE FILE USING CURL -O, CHECK THE FILE BY USING CAT OR MORE EFFICIENT USE HEAD FUNCTION (HEAD -4: TO PULL 4 LINES FOR EX). THEN NEED TO OPEN THE FILE IN PYTHON USING THE OPEN(NEXT TIME USE WITH OPEN). TO WRITE A FOR LOOP SINCE IT IS ASKING TO GO THOUGH EACH LINE (=ITERATION). DO A RSTRIP FXN TO REMOVE SPACE. ?I CAN A MULTIDIMENTIONAL DATA STRUCTURE ONCE I LEARN HOW, BUT FOR NOW DO A LIST. I NEED TO CREATE AND EMPTY LIST AND SINCE I JUST NEED TO LOOK AT THE LINES, IS IT ONE VARIALE (STORE AS 0)****** These were my intial thoughts but I was overcomplicating it. It is a possible method but there is a simpler way... **** FIRST THING IS OPEN THE FILE AND ASSIGN IT TO A NEW VAIABLE TO INDICATE THAT IT IS THE OPEN WORKING FILE. I CAN USE THE COUNT FUNCTION TO COUNT NUMBER OF LINES. SINCE THERE IS ONLY ONE THING IN THE LIST, I CAN JUST COUNT DIRECTLY. IN ODER TO DO THAT, I ASSIGNED THE FIRST THING TO COUNT IS 0 TO GIVE MY LOOP A PLACE TO START AND EVERY TIME I ADD 1. IT WILL STAY IN THAT LOOP UNTIL IT REACHES THE END OF THE LINES IN THE FILE. THEN IN ORDER TO ADD THE TOTAL NUMBER OF CHARACTERS, I HAD TO GIVE MY LOOP A PLACE TO START COUNTING FOR THAT. SO I ASSINED IT A VARIABLE AND GAVE IT A VALUE OF 0 TO KNOW WHERE IT STARTS. I THEN USED THE LENGTH (LEN) FUNCTION TO HAVE IT COUNT ALL CHARACTERS. FINALLY SINCE 
#IT IS A SIMPLE AVERAGE AND BOTH MY VARIABLES ARE STRINGS I CAN USE THE / SIGN TO DIVIDE THEM BY EACH OTHER.
with open('Python_06.fastq','r') as fastqfile:
 count = 0
 totalcharacter = 0
 for line in fastqfile:
    count+=1
    totalcharacter = totalcharacter + len(line)
print(count) 
print(totalcharacter)
print(totalcharacter / count) 

# fastqlist = [
# for line in fastqfile:
#    line = line.rstrip()
#    fastqfile = fastqlist[0]
#    print(fastqfile)


#Q9: NOTES NEED TO BE CLEANED UP
#I NEED TO OPEN MY FILE AND PLACE IT IN READ MODE. Q:WHERE DO I GET THIS FILE FROM???. I THEN NEED TO READ EACH LINE MEANING ITS AN ITERATION SO I HAVE TO WRITE A FOR LOOP. BEFORE THE LOOP, I NEED TO CREATE A LIST AND SPLIT THE LIST INTO HEADER LINE AND SEQUENCE LINE. ONCE I CREATE THAT, I THINK I HAVE TO ASK TRUE OR FALSE QUESTIONS.***import.re to look for 

#HERE IS ONE METHOD TO OPEN AND READ THE CONTENTS:
#with open('Python_06.fasta','r') as prob9:
#contents = prob9.read()
#print(contents)

#THE OTHER WAY IS BY WRITING A FOR LOOP AS FOLLOWS:
#  for line in prob9:
#  print(line)

#I NEXT WANT TO ASK IT IF THE LINE IS A HEADER LINE OR A SEQUENCE LINE. I WANT TO DO THAT BY ASKING IF TRUE AND FALSE. THEREFORE, I SHOULD INCLUDE AN IF STATEMENT INSIDE MY LOOP? BEFORE THE LOOP, I WANTED TO CREATE A LIST AND SEPARATE THE HEADER FROM THE SEQUENCE... THROUGH CONFUSION, I LOOKED AT THE ANSWER KEY AND REALIZED IT MAY BE A GOOD METHOD TO DO SO. HOWEVER, A BETTER ORGANIZATIONAL METHOD IS A DICTIONARY BECAUSE IT WILL SPEICIFICALLY MATCH THE HEADER WITH THE SEQUENCE RATHER THAN JUST LISTING THEM. FOR EASE OF READING, REWRITE THIS PROBLEM ON LINE BELOW:
fastaseqdict = {} 
with open('Python_06.fasta','r') as prob9:
  for line in prob9:
# fine the seq name line
    if line.startswith('>'):
      key = line
    else:
      value = line
      fastaseqdict[key] = [value]
print(fastaseqdict)
		
# if this line is found, i want to place it into an objext that i will name key to store the info
# if we dont find the seq name with the ^, i want to store it as the value (sequence)
# so now that we have the key value, i want to add them to my empty dictionary
# at the end, i would print the dictionary to find the key and value assignemnts

 


#   line = line.rstrip()
#   fastaseqdict = line.split('\t') 
#   header = fastaseqdict[0]
#   sequence = fastaseqdict[1]
#   print(header)


#   if line 
#      Header = line
#      fastqdict{Header} = ''
#    else:
#      fastqdict{Header} += line
#print(fastqdict)
# if header in fastaseqdict:
#   print('True')
# else:
#   print(sequence)i
